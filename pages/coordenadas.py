# file: your_project/pages/coordenadas.py
import dash
from dash import dcc, html, Input, Output, State, callback, register_page
import dash_bootstrap_components as dbc
import pandas as pd
from io import BytesIO
import base64

# Imports locales
from .data_loader import cargar_datos, crear_tabla_principal, preparar_datos_comunidades, filtrar_coordenadas_validas
from .components import (
    crear_header, crear_navbar, crear_sidebar_universal, crear_mapa_plotly,
    crear_grafico_distancias, crear_tabla_dash, crear_cards_top_granjas,
    crear_cards_metricas_principales
)
from .config import COLORS

register_page(
    __name__,
    path="/coordenadas",
    name="Coordenadas",
    title="Dashboard - Granjas Solares y Comunidades Energ√©ticas",
    order=1
)
granjas_actualizadas, _, comunidades, estadisticas, resumen_detallado = cargar_datos()
granjas_validas = filtrar_coordenadas_validas(granjas_actualizadas)
comunidades_muestra = preparar_datos_comunidades(comunidades, sample_size=100)
layout = html.Div([
    # Sidebar desplegable
    crear_sidebar_universal(),
    
    # Header
    # Header din√°mico espec√≠fico para coordenadas
    crear_header(
        titulo_pagina="An√°lisis de Proximidad Geogr√°fica",
        descripcion_pagina="Sistema de an√°lisis espacial entre granjas solares y comunidades energ√©ticas",
        icono_pagina="fas fa-map-marked-alt",
        informacion_adicional="Herramientas avanzadas de geolocalizaci√≥n para identificar proyectos viables y calcular distancias euclidianas entre infraestructuras energ√©ticas",
        color_tema="#28a745"
    ),
    # Barra de navegaci√≥n eliminada
    
    # Container principal
    dbc.Container([
        dbc.Row([
            # Contenido principal (ahora ocupa todo el ancho)
            dbc.Col([
                # Tabs de navegaci√≥n
                dbc.Tabs([
                    dbc.Tab(label="üîç Explorar por Granja", tab_id="tab-explorar"),
                    dbc.Tab(label="üó∫Ô∏è Mapas", tab_id="tab-mapas"),
                    dbc.Tab(label="üìà Estad√≠sticas", tab_id="tab-estadisticas"),
                    dbc.Tab(label="üìã Datos", tab_id="tab-datos"),
                ], id="tabs", active_tab="tab-explorar", className="mb-4"),
                
                # Contenido din√°mico
                html.Div(id="coordenadas-tab-content")
            ], width=12)  # Ahora ocupa todo el ancho
        ])
    ], fluid=True)
], style={'backgroundColor': COLORS['bg_main'], 'minHeight': '100vh'})

# Callback para manejar el contenido de las tabs
@callback(
    Output("coordenadas-tab-content", "children"),
    Input("tabs", "active_tab")
)
def render_tab_content(active_tab):
    if active_tab == "tab-explorar":
        return crear_contenido_explorar()
    elif active_tab == "tab-mapas":
        return crear_contenido_mapas()
    elif active_tab == "tab-estadisticas":
        return crear_contenido_estadisticas()
    elif active_tab == "tab-datos":
        return crear_contenido_datos()
    
    return html.Div("Selecciona una pesta√±a")

def crear_contenido_explorar():
    """Crear contenido de la pesta√±a Explorar"""
    return html.Div([
        html.H2("üîç Explorador de Proximidad por Granja", 
                className="mb-4", 
                style={'color': COLORS['text_primary'], 'fontWeight': '600'}),
        
        # Explicaci√≥n principal con dise√±o profesional
        dbc.Card([
            dbc.CardBody([
                html.H5([
                    html.I(className="fas fa-search", style={'color': COLORS['primary'], 'marginRight': '10px'}),
                    "Funcionalidad de la Herramienta"
                ], className="mb-3", style={'color': COLORS['text_primary'], 'fontWeight': '600'}),
                
                dbc.Row([
                    dbc.Col([
                        html.Div([
                            html.I(className="fas fa-bullseye", style={'color': COLORS['success'], 'marginRight': '8px'}),
                            html.Strong("Objetivo", style={'color': COLORS['text_primary']}),
                            html.P("Explorar en detalle las comunidades energ√©ticas m√°s cercanas a cada granja solar espec√≠fica", 
                                  className="mb-0 mt-1", 
                                  style={'color': COLORS['text_secondary'], 'fontSize': '0.9em', 'lineHeight': '1.5'})
                        ])
                    ], width=6),
                    dbc.Col([
                        html.Div([
                            html.I(className="fas fa-cogs", style={'color': COLORS['info'], 'marginRight': '8px'}),
                            html.Strong("Metodolog√≠a", style={'color': COLORS['text_primary']}),
                            html.P("Ranking de las 10 comunidades m√°s cercanas ordenadas por distancia euclidiana", 
                                  className="mb-0 mt-1", 
                                  style={'color': COLORS['text_secondary'], 'fontSize': '0.9em', 'lineHeight': '1.5'})
                        ])
                    ], width=6)
                ], className="mb-3"),
                
                html.Hr(style={'borderColor': COLORS['border'], 'margin': '1rem 0'}),
                
                html.Div([
                    html.I(className="fas fa-lightbulb", style={'color': COLORS['warning'], 'marginRight': '8px'}),
                    html.Strong("Aplicaciones Estrat√©gicas", style={'color': COLORS['text_primary']}),
                    html.P("Identificaci√≥n de oportunidades de colaboraci√≥n, planificaci√≥n de rutas de transmisi√≥n y evaluaci√≥n de viabilidad de proyectos conjuntos", 
                          className="mb-0 mt-1", 
                          style={'color': COLORS['text_secondary'], 'fontSize': '0.9em', 'lineHeight': '1.5'})
                ])
            ])
        ], className="mb-4", style={'border': f'1px solid {COLORS["border"]}', 'boxShadow': f'0 2px 4px {COLORS["shadow"]}'}),
        
        # M√©tricas principales
        dbc.Row([
            dbc.Col(card, width=3) for card in crear_cards_metricas_principales(granjas_actualizadas, estadisticas)
        ], className="mb-4"),
        
        html.Hr(style={'borderColor': COLORS['border_dark'], 'margin': '2rem 0'}),
        
        # Selector de granja con dise√±o mejorado
        html.H4([
            html.I(className="fas fa-solar-panel", style={'color': COLORS['primary'], 'marginRight': '10px'}),
            "Selecci√≥n de Granja para An√°lisis Detallado"
        ], className="mb-4", style={'color': COLORS['text_primary'], 'fontWeight': '600'}),
        
        dbc.Row([
            dbc.Col([
                dbc.Card([
                    dbc.CardBody([
                        html.Label("Selecciona una granja para visualizar sus comunidades m√°s cercanas:", 
                                  className="mb-3",
                                  style={'color': COLORS['text_primary'], 'fontWeight': '500', 'fontSize': '1.1em'}),
                        dcc.Dropdown(
                            id="dropdown-granja",
                            options=[{
                                'label': f"Granja {row['Item']} - {row['Municipio']}, {row['Departamento']}", 
                                'value': row['Item']
                            } for _, row in granjas_actualizadas.iterrows()],
                            value=granjas_actualizadas['Item'].iloc[0],
                            style={'color': '#000000', 'fontSize': '0.95em'}
                        )
                    ])
                ], style={'border': f'1px solid {COLORS["border"]}', 'boxShadow': f'0 1px 3px {COLORS["shadow"]}'})
            ], width=8),
            dbc.Col([
                dbc.Card([
                    dbc.CardBody([
                        html.Div([
                            html.I(className="fas fa-info-circle", style={'color': COLORS['info'], 'marginRight': '8px'}),
                            html.Strong("Informaci√≥n T√©cnica", style={'color': COLORS['text_primary'], 'fontSize': '0.9em'}),
                            html.P("Cada granja muestra sus 10 comunidades m√°s cercanas con distancias calculadas mediante geolocalizaci√≥n de precisi√≥n", 
                                  className="mb-0 mt-2", 
                                  style={'color': COLORS['text_secondary'], 'fontSize': '0.8em', 'lineHeight': '1.4'})
                        ])
                    ])
                ], style={'backgroundColor': '#F8FAFC', 'border': f'1px solid {COLORS["border"]}'})
            ], width=4)
        ], className="mb-4"),
        
        # Informaci√≥n de la granja seleccionada
        html.Div(id="granja-info"),
        
        # Tabla de comunidades cercanas
        html.Div(id="comunidades-cercanas")
    ])

def crear_contenido_mapas():
    """Crear contenido de la pesta√±a Mapas"""
    return html.Div([
        html.H2("üó∫Ô∏è Visualizaci√≥n Geogr√°fica Interactiva", 
                className="mb-4", 
                style={'color': COLORS['text_primary'], 'fontWeight': '600'}),
        
        # Descripci√≥n general con dise√±o profesional
        dbc.Card([
            dbc.CardBody([
                html.H5([
                    html.I(className="fas fa-map-marked-alt", style={'color': COLORS['primary'], 'marginRight': '10px'}),
                    "Mapa Integrado de Infraestructura Energ√©tica"
                ], className="mb-3", style={'color': COLORS['text_primary'], 'fontWeight': '600'}),
                
                html.P("Visualizaci√≥n geogr√°fica interactiva que muestra la distribuci√≥n espacial de granjas solares FENOGE y comunidades energ√©ticas identificadas en el territorio colombiano", 
                       className="mb-3", 
                       style={'color': COLORS['text_secondary'], 'fontStyle': 'italic', 'fontSize': '1.05em', 'lineHeight': '1.6'}),
                
                dbc.Row([
                    dbc.Col([
                        html.Div([
                            html.I(className="fas fa-search-location", style={'color': COLORS['info'], 'marginRight': '8px'}),
                            html.Strong("An√°lisis Geoespacial", style={'color': COLORS['text_primary']}),
                            html.P("Identificaci√≥n de patrones de concentraci√≥n, oportunidades de proximidad y clusters energ√©ticos territoriales", 
                                  className="mb-0 mt-1", 
                                  style={'color': COLORS['text_secondary'], 'fontSize': '0.9em', 'lineHeight': '1.5'})
                        ])
                    ], width=6),
                    dbc.Col([
                        html.Div([
                            html.I(className="fas fa-route", style={'color': COLORS['success'], 'marginRight': '8px'}),
                            html.Strong("Planificaci√≥n Estrat√©gica", style={'color': COLORS['text_primary']}),
                            html.P("Evaluaci√≥n de rutas de interconexi√≥n, an√°lisis de viabilidad geogr√°fica y optimizaci√≥n de proyectos", 
                                  className="mb-0 mt-1", 
                                  style={'color': COLORS['text_secondary'], 'fontSize': '0.9em', 'lineHeight': '1.5'})
                        ])
                    ], width=6)
                ])
            ])
        ], className="mb-4", style={'border': f'1px solid {COLORS["border"]}', 'boxShadow': f'0 2px 4px {COLORS["shadow"]}'}),
        
        # Leyenda mejorada con dise√±o profesional
        dbc.Row([
            dbc.Col([
                dbc.Card([
                    dbc.CardHeader([
                        html.H6([
                            html.I(className="fas fa-info-circle", style={'color': COLORS['primary'], 'marginRight': '8px'}),
                            "Leyenda del Mapa"
                        ], className="mb-0", style={'color': COLORS['text_primary'], 'fontWeight': '600'})
                    ], style={'backgroundColor': '#F0F9FF', 'border': 'none'}),
                    dbc.CardBody([
                        html.Div([
                            html.P([
                                html.Span("üî¥ ", style={'color': COLORS['danger'], 'fontSize': '1.3em', 'marginRight': '8px'}),
                                html.Strong("Granjas Solares FENOGE", style={'color': COLORS['text_primary']})
                            ], className="mb-1"),
                            html.Small("15 instalaciones fotovoltaicas de 1MW cada una", 
                                     style={'color': COLORS['text_secondary'], 'marginLeft': '24px', 'display': 'block'})
                        ], className="mb-3"),
                        html.Div([
                            html.P([
                                html.Span("üîµ ", style={'color': COLORS['primary'], 'fontSize': '1.3em', 'marginRight': '8px'}),
                                html.Strong("Comunidades Energ√©ticas", style={'color': COLORS['text_primary']})
                            ], className="mb-1"),
                            html.Small("Muestra de 100 comunidades (optimizaci√≥n de rendimiento)", 
                                     style={'color': COLORS['text_secondary'], 'marginLeft': '24px', 'display': 'block'})
                        ])
                    ])
                ], style={'border': f'1px solid {COLORS["border"]}', 'boxShadow': f'0 1px 3px {COLORS["shadow"]}'})
            ], width=5),
            dbc.Col([
                dbc.Card([
                    dbc.CardHeader([
                        html.H6([
                            html.I(className="fas fa-mouse-pointer", style={'color': COLORS['success'], 'marginRight': '8px'}),
                            "Gu√≠a de Interacci√≥n"
                        ], className="mb-0", style={'color': COLORS['text_primary'], 'fontWeight': '600'})
                    ], style={'backgroundColor': '#F0FDF4', 'border': 'none'}),
                    dbc.CardBody([
                        html.Ul([
                            html.Li("Haga clic en cualquier punto para informaci√≥n detallada", style={'color': COLORS['text_primary'], 'marginBottom': '6px'}),
                            html.Li("Use controles de zoom para explorar regiones espec√≠ficas", style={'color': COLORS['text_primary'], 'marginBottom': '6px'}),
                            html.Li("Observe patrones de concentraci√≥n geogr√°fica", style={'color': COLORS['text_primary'], 'marginBottom': '6px'}),
                            html.Li("Identifique oportunidades de interconexi√≥n cercana", style={'color': COLORS['text_primary']})
                        ], style={'fontSize': '0.9em', 'lineHeight': '1.4', 'marginBottom': '0'})
                    ])
                ], style={'border': f'1px solid {COLORS["border"]}', 'boxShadow': f'0 1px 3px {COLORS["shadow"]}'})
            ], width=7)
        ], className="mb-4"),
        
        # Mapa principal con mejor altura
        dbc.Card([
            dbc.CardBody([
                dcc.Graph(
                    id="mapa-principal",
                    figure=crear_mapa_plotly(granjas_validas, comunidades_muestra),
                    style={'height': '650px'}
                )
            ], style={'padding': '10px'})
        ], style={'border': f'1px solid {COLORS["border"]}', 'boxShadow': f'0 2px 4px {COLORS["shadow"]}'})
    ])

def crear_contenido_estadisticas():
    """Crear contenido de la pesta√±a Estad√≠sticas"""
    card_top, card_bottom = crear_cards_top_granjas(estadisticas)
    
    return html.Div([
        html.H2("üìà An√°lisis Estad√≠stico de Proximidad Geogr√°fica", 
                className="mb-4", 
                style={'color': COLORS['text_primary'], 'fontWeight': '600'}),
        
        # Explicaci√≥n general con dise√±o profesional
        dbc.Card([
            dbc.CardBody([
                html.H5("üéØ Descripci√≥n del An√°lisis", 
                       className="mb-3", 
                       style={'color': COLORS['primary'], 'fontWeight': '600'}),
                html.P([
                    "Este an√°lisis eval√∫a la ", html.Strong("proximidad geogr√°fica", style={'color': COLORS['primary']}), 
                    " entre las granjas solares y las comunidades energ√©ticas para identificar oportunidades de interconexi√≥n y colaboraci√≥n energ√©tica."
                ], className="mb-3", style={'color': COLORS['text_primary'], 'lineHeight': '1.6'}),
                
                dbc.Row([
                    dbc.Col([
                        html.Div([
                            html.I(className="fas fa-ruler", style={'color': COLORS['info'], 'marginRight': '8px'}),
                            html.Strong("Distancia Media", style={'color': COLORS['text_primary']}),
                            html.P("Promedio de distancias a las 10 comunidades m√°s cercanas", 
                                  className="mb-0 mt-1", 
                                  style={'color': COLORS['text_secondary'], 'fontSize': '0.9em'})
                        ])
                    ], width=6),
                    dbc.Col([
                        html.Div([
                            html.I(className="fas fa-dollar-sign", style={'color': COLORS['success'], 'marginRight': '8px'}),
                            html.Strong("Importancia Econ√≥mica", style={'color': COLORS['text_primary']}),
                            html.P("Menores distancias = menores costos de transmisi√≥n", 
                                  className="mb-0 mt-1", 
                                  style={'color': COLORS['text_secondary'], 'fontSize': '0.9em'})
                        ])
                    ], width=6)
                ])
            ])
        ], className="mb-4", style={'border': f'1px solid {COLORS["border"]}', 'boxShadow': f'0 2px 4px {COLORS["shadow"]}'}),
        
        # Rankings con dise√±o mejorado
        html.H4("üìä Rankings de Ubicaci√≥n Estrat√©gica", 
                className="mb-4", 
                style={'color': COLORS['text_primary'], 'fontWeight': '600'}),
        
        dbc.Row([
            dbc.Col([
                # Explicaci√≥n Top 5 Mejores con dise√±o profesional
                dbc.Card([
                    dbc.CardHeader([
                        html.H6([
                            html.I(className="fas fa-trophy", style={'color': COLORS['success'], 'marginRight': '8px'}),
                            "Mejores Ubicaciones Estrat√©gicas"
                        ], className="mb-0", style={'color': COLORS['text_primary'], 'fontWeight': '600'})
                    ], style={'backgroundColor': '#F0FDF4', 'border': 'none'}),
                    dbc.CardBody([
                        html.P("Granjas con menor distancia promedio a comunidades energ√©ticas", 
                              className="mb-3", 
                              style={'color': COLORS['text_secondary'], 'fontStyle': 'italic'}),
                        
                        html.Div([
                            html.Strong("Ventajas Competitivas:", 
                                      style={'color': COLORS['success'], 'fontSize': '0.95em'}),
                            html.Ul([
                                html.Li("Menores costos de interconexi√≥n", style={'color': COLORS['text_primary']}),
                                html.Li("Mayor viabilidad econ√≥mica", style={'color': COLORS['text_primary']}),
                                html.Li("Implementaci√≥n m√°s r√°pida", style={'color': COLORS['text_primary']}),
                                html.Li("Ideales para proyectos piloto", style={'color': COLORS['text_primary']})
                            ], className="mb-0", style={'fontSize': '0.85em', 'lineHeight': '1.5'})
                        ])
                    ])
                ], className="mb-3", style={'border': f'1px solid #D1FAE5'}),
                card_top
            ], width=6),
            
            dbc.Col([
                # Explicaci√≥n Top 5 Desaf√≠os con dise√±o profesional
                dbc.Card([
                    dbc.CardHeader([
                        html.H6([
                            html.I(className="fas fa-exclamation-triangle", style={'color': COLORS['warning'], 'marginRight': '8px'}),
                            "Mayores Desaf√≠os de Conectividad"
                        ], className="mb-0", style={'color': COLORS['text_primary'], 'fontWeight': '600'})
                    ], style={'backgroundColor': '#FFFBEB', 'border': 'none'}),
                    dbc.CardBody([
                        html.P("Granjas con mayor distancia promedio a comunidades energ√©ticas", 
                              className="mb-3", 
                              style={'color': COLORS['text_secondary'], 'fontStyle': 'italic'}),
                        
                        html.Div([
                            html.Strong("Consideraciones Estrat√©gicas:", 
                                      style={'color': COLORS['warning'], 'fontSize': '0.95em'}),
                            html.Ul([
                                html.Li("Requieren mayor inversi√≥n inicial", style={'color': COLORS['text_primary']}),
                                html.Li("Costos de transmisi√≥n elevados", style={'color': COLORS['text_primary']}),
                                html.Li("Alto potencial de impacto social", style={'color': COLORS['text_primary']}),
                                html.Li("Necesitan estrategias especializadas", style={'color': COLORS['text_primary']})
                            ], className="mb-0", style={'fontSize': '0.85em', 'lineHeight': '1.5'})
                        ])
                    ])
                ], className="mb-3", style={'border': f'1px solid #FED7AA'}),
                card_bottom
            ], width=6)
        ], className="mb-5"),
        
        # Gr√°fico con explicaci√≥n mejorada
        html.H4("üìà Distribuci√≥n de Distancias por Granja", 
                className="mb-3", 
                style={'color': COLORS['text_primary'], 'fontWeight': '600'}),
        
        dbc.Card([
            dbc.CardBody([
                html.P([
                    html.I(className="fas fa-chart-line", style={'color': COLORS['info'], 'marginRight': '8px'}),
                    "Este gr√°fico presenta el ", html.Strong("rango completo de distancias", style={'color': COLORS['primary']}), 
                    " (m√≠nima, promedio y m√°xima) para cada granja, permitiendo identificar patrones de dispersi√≥n y concentraci√≥n de comunidades en el territorio nacional."
                ], className="mb-0", style={'color': COLORS['text_primary'], 'lineHeight': '1.6'})
            ])
        ], className="mb-3", style={'backgroundColor': '#F8FAFC', 'border': f'1px solid {COLORS["border"]}'}),
        
        dcc.Graph(
            id="grafico-distancias",
            figure=crear_grafico_distancias(estadisticas)
        )
    ])

def crear_contenido_datos():
    """Crear contenido de la pesta√±a Datos"""
    tabla_principal = crear_tabla_principal(granjas_actualizadas, estadisticas)
    
    return html.Div([
        html.H2("üìã Base de Datos del An√°lisis de Proximidad", 
                className="mb-4", 
                style={'color': COLORS['text_primary'], 'fontWeight': '600'}),
        
        # Descripci√≥n general con dise√±o profesional
        dbc.Card([
            dbc.CardBody([
                html.H5([
                    html.I(className="fas fa-database", style={'color': COLORS['primary'], 'marginRight': '10px'}),
                    "Informaci√≥n sobre las Bases de Datos"
                ], className="mb-3", style={'color': COLORS['text_primary'], 'fontWeight': '600'}),
                
                dbc.Row([
                    dbc.Col([
                        html.Div([
                            html.I(className="fas fa-table", style={'color': COLORS['success'], 'marginRight': '8px'}),
                            html.Strong("Contenido", style={'color': COLORS['text_primary']}),
                            html.P("Datos completos utilizados en el an√°lisis de proximidad geogr√°fica entre granjas solares y comunidades energ√©ticas", 
                                  className="mb-0 mt-1", 
                                  style={'color': COLORS['text_secondary'], 'fontSize': '0.9em', 'lineHeight': '1.5'})
                        ])
                    ], width=6),
                    dbc.Col([
                        html.Div([
                            html.I(className="fas fa-download", style={'color': COLORS['info'], 'marginRight': '8px'}),
                            html.Strong("Formatos Disponibles", style={'color': COLORS['text_primary']}),
                            html.P("CSV (texto plano) y Excel (.xlsx) para an√°lisis externos y procesamiento", 
                                  className="mb-0 mt-1", 
                                  style={'color': COLORS['text_secondary'], 'fontSize': '0.9em', 'lineHeight': '1.5'})
                        ])
                    ], width=6)
                ])
            ])
        ], className="mb-4", style={'border': f'1px solid {COLORS["border"]}', 'boxShadow': f'0 2px 4px {COLORS["shadow"]}'}),
        
        dbc.Tabs([
            dbc.Tab([
                html.H4("üéØ Tabla Principal del An√°lisis", 
                        className="mt-4 mb-3", 
                        style={'color': COLORS['text_primary'], 'fontWeight': '600'}),
                
                # Explicaci√≥n mejorada de la tabla principal
                dbc.Card([
                    dbc.CardHeader([
                        html.H6([
                            html.I(className="fas fa-chart-area", style={'color': COLORS['primary'], 'marginRight': '8px'}),
                            "Tabla Consolidada de An√°lisis"
                        ], className="mb-0", style={'color': COLORS['text_primary'], 'fontWeight': '600'})
                    ], style={'backgroundColor': '#F0F9FF', 'border': 'none'}),
                    dbc.CardBody([
                        html.P("Combina informaci√≥n t√©cnica de granjas solares con estad√≠sticas de proximidad calculadas", 
                              className="mb-3", 
                              style={'color': COLORS['text_secondary'], 'fontStyle': 'italic', 'fontSize': '1.05em'}),
                        
                        dbc.Row([
                            dbc.Col([
                                html.Strong("üìä Datos Incluidos:", style={'color': COLORS['primary'], 'fontSize': '0.95em'}),
                                html.Ul([
                                    html.Li("Informaci√≥n t√©cnica (ubicaci√≥n, potencia, beneficiarios)", style={'color': COLORS['text_primary']}),
                                    html.Li("Distancia m√≠nima a comunidades", style={'color': COLORS['text_primary']}),
                                    html.Li("Distancia promedio (indicador clave)", style={'color': COLORS['text_primary']}),
                                    html.Li("Distancia m√°xima del rango analizado", style={'color': COLORS['text_primary']})
                                ], className="mb-0", style={'fontSize': '0.85em', 'lineHeight': '1.5'})
                            ], width=6),
                            dbc.Col([
                                html.Strong("üíº Aplicaci√≥n Recomendada:", style={'color': COLORS['success'], 'fontSize': '0.95em'}),
                                html.P("An√°lisis comparativo entre granjas, priorizaci√≥n de proyectos de interconexi√≥n y evaluaci√≥n de viabilidad econ√≥mica", 
                                      className="mb-0 mt-1", 
                                      style={'color': COLORS['text_primary'], 'fontSize': '0.85em', 'lineHeight': '1.5'})
                            ], width=6)
                        ])
                    ])
                ], className="mb-4", style={'border': f'1px solid #DBEAFE'}),
                
                crear_tabla_dash(tabla_principal, "tabla-principal"),
                
                dbc.Row([
                    dbc.Col([
                        dbc.Button("üì• Descargar CSV", id="btn-csv-principal", color="primary", className="me-2"),
                        dbc.Button("üì• Descargar Excel", id="btn-excel-principal", color="success")
                    ], width=12)
                ], className="mt-3"),
                
                dcc.Download(id="download-csv-principal"),
                dcc.Download(id="download-excel-principal")
            ], label="üéØ Tabla Principal"),
            
            dbc.Tab([
                html.H4("üèóÔ∏è Base de Datos de Granjas Solares", 
                        className="mt-4 mb-3", 
                        style={'color': COLORS['text_primary'], 'fontWeight': '600'}),
                
                # Explicaci√≥n mejorada de granjas
                dbc.Card([
                    dbc.CardHeader([
                        html.H6([
                            html.I(className="fas fa-solar-panel", style={'color': COLORS['success'], 'marginRight': '8px'}),
                            "Registro T√©cnico de Instalaciones FENOGE"
                        ], className="mb-0", style={'color': COLORS['text_primary'], 'fontWeight': '600'})
                    ], style={'backgroundColor': '#F0FDF4', 'border': 'none'}),
                    dbc.CardBody([
                        html.P("Base de datos completa de las granjas solares incluidas en el programa de Fuentes No Convencionales de Energ√≠a", 
                              className="mb-3", 
                              style={'color': COLORS['text_secondary'], 'fontStyle': 'italic', 'fontSize': '1.05em'}),
                        
                        dbc.Row([
                            dbc.Col([
                                html.Strong("üîç Informaci√≥n T√©cnica:", style={'color': COLORS['success'], 'fontSize': '0.95em'}),
                                html.Ul([
                                    html.Li("Identificaci√≥n √∫nica por granja", style={'color': COLORS['text_primary']}),
                                    html.Li("Geolocalizaci√≥n precisa (coordenadas)", style={'color': COLORS['text_primary']}),
                                    html.Li("Especificaciones t√©cnicas (potencia kW)", style={'color': COLORS['text_primary']}),
                                    html.Li("Informaci√≥n social (beneficiarios)", style={'color': COLORS['text_primary']})
                                ], className="mb-0", style={'fontSize': '0.85em', 'lineHeight': '1.5'})
                            ], width=6),
                            dbc.Col([
                                html.Strong("üíº Uso Estrat√©gico:", style={'color': COLORS['info'], 'fontSize': '0.95em'}),
                                html.P("Consulta de datos t√©cnicos, planificaci√≥n de proyectos espec√≠ficos y an√°lisis de distribuci√≥n territorial", 
                                      className="mb-0 mt-1", 
                                      style={'color': COLORS['text_primary'], 'fontSize': '0.85em', 'lineHeight': '1.5'})
                            ], width=6)
                        ])
                    ])
                ], className="mb-4", style={'border': f'1px solid #D1FAE5'}),
                
                crear_tabla_dash(granjas_actualizadas, "tabla-granjas"),
                
                dbc.Row([
                    dbc.Col([
                        dbc.Button("üì• Descargar CSV", id="btn-csv-granjas", color="primary", className="me-2"),
                        dbc.Button("üì• Descargar Excel", id="btn-excel-granjas", color="success")
                    ], width=12)
                ], className="mt-3"),
                
                dcc.Download(id="download-csv-granjas"),
                dcc.Download(id="download-excel-granjas")
            ], label="üèóÔ∏è Granjas"),
            
            dbc.Tab([
                html.H4("‚ö° Comunidades Energ√©ticas", 
                        className="mt-4 mb-3", 
                        style={'color': COLORS['text_primary'], 'fontWeight': '600'}),
                
                # Explicaci√≥n mejorada de comunidades
                dbc.Card([
                    dbc.CardHeader([
                        html.H6([
                            html.I(className="fas fa-users", style={'color': COLORS['warning'], 'marginRight': '8px'}),
                            "Registro de Comunidades Energ√©ticas"
                        ], className="mb-0", style={'color': COLORS['text_primary'], 'fontWeight': '600'})
                    ], style={'backgroundColor': '#FFFBEB', 'border': 'none'}),
                    dbc.CardBody([
                        html.P("Cat√°logo de comunidades energ√©ticas identificadas como potenciales beneficiarias de proyectos de interconexi√≥n", 
                              className="mb-3", 
                              style={'color': COLORS['text_secondary'], 'fontStyle': 'italic', 'fontSize': '1.05em'}),
                        
                        dbc.Row([
                            dbc.Col([
                                html.Strong("üîç Datos Registrados:", style={'color': COLORS['warning'], 'fontSize': '0.95em'}),
                                html.Ul([
                                    html.Li("Identificaci√≥n y denominaci√≥n oficial", style={'color': COLORS['text_primary']}),
                                    html.Li("Ubicaci√≥n geogr√°fica detallada", style={'color': COLORS['text_primary']}),
                                    html.Li("Potencia estimada requerida (kWp)", style={'color': COLORS['text_primary']}),
                                    html.Li("Inversi√≥n estimada para desarrollo", style={'color': COLORS['text_primary']})
                                ], className="mb-0", style={'fontSize': '0.85em', 'lineHeight': '1.5'})
                            ], width=6),
                            dbc.Col([
                                html.Strong("üíº Aplicaci√≥n Pr√°ctica:", style={'color': COLORS['info'], 'fontSize': '0.95em'}),
                                html.P("Identificaci√≥n de socios estrat√©gicos, estimaci√≥n de costos de proyectos y an√°lisis de potencial energ√©tico territorial", 
                                      className="mb-0 mt-1", 
                                      style={'color': COLORS['text_primary'], 'fontSize': '0.85em', 'lineHeight': '1.5'})
                            ], width=6)
                        ])
                    ])
                ], className="mb-4", style={'border': f'1px solid #FED7AA'}),
                
                dbc.Alert([
                    html.I(className="fas fa-info-circle", style={'color': COLORS['info'], 'marginRight': '8px'}),
                    html.Strong(f"Muestra Optimizada: ", style={'color': COLORS['text_primary']}),
                    f"Visualizando 50 de {len(comunidades)} comunidades para garantizar rendimiento √≥ptimo. Descargue la tabla completa para acceso total a los datos."
                ], color="light", className="mb-3", style={'border': f'1px solid {COLORS["border"]}'}),
                         
                crear_tabla_dash(comunidades.head(50), "tabla-comunidades"),
                
                dbc.Row([
                    dbc.Col([
                        dbc.Button("üì• Descargar CSV", id="btn-csv-comunidades", color="primary", className="me-2"),
                        dbc.Button("üì• Descargar Excel", id="btn-excel-comunidades", color="success")
                    ], width=12)
                ], className="mt-3"),
                
                dcc.Download(id="download-csv-comunidades"),
                dcc.Download(id="download-excel-comunidades")
            ], label="‚ö° Comunidades")
        ])
    ])

# Callback para actualizar informaci√≥n de granja seleccionada
@callback(
    [Output("granja-info", "children"),
     Output("comunidades-cercanas", "children")],
    Input("dropdown-granja", "value")
)
def actualizar_granja_info(granja_seleccionada):
    if not granja_seleccionada:
        return "", ""
    
    # Informaci√≥n de la granja
    granja_info = granjas_actualizadas[granjas_actualizadas['Item'] == granja_seleccionada].iloc[0]
    stats_granja = estadisticas[estadisticas['Item'] == granja_seleccionada].iloc[0]
    
    info_card = dbc.Row([
        dbc.Col([
            dbc.Card([
                dbc.CardHeader([
                    html.H6([
                        html.I(className="fas fa-solar-panel", style={'color': COLORS['success'], 'marginRight': '8px'}),
                        f"Granja Solar {granja_seleccionada}"
                    ], className="mb-0", style={'color': COLORS['text_primary'], 'fontWeight': '600'})
                ], style={'backgroundColor': '#F0FDF4', 'border': 'none'}),
                dbc.CardBody([
                    dbc.Row([
                        dbc.Col([
                            html.P([
                                html.I(className="fas fa-map-marker-alt", style={'color': COLORS['primary'], 'marginRight': '6px'}),
                                html.Strong("Ubicaci√≥n:", style={'color': COLORS['text_primary']}), html.Br(),
                                html.Span(f"{granja_info['Municipio']}, {granja_info['Departamento']}", 
                                         style={'color': COLORS['text_secondary'], 'fontSize': '0.9em'})
                            ], className="mb-2")
                        ], width=12),
                        dbc.Col([
                            html.P([
                                html.I(className="fas fa-bolt", style={'color': COLORS['warning'], 'marginRight': '6px'}),
                                html.Strong("Potencia Instalada:", style={'color': COLORS['text_primary']}), html.Br(),
                                html.Span(f"{granja_info['Potencia  KW']} kW", 
                                         style={'color': COLORS['text_secondary'], 'fontSize': '0.9em', 'fontWeight': 'bold'})
                            ], className="mb-2")
                        ], width=6),
                        dbc.Col([
                            html.P([
                                html.I(className="fas fa-users", style={'color': COLORS['info'], 'marginRight': '6px'}),
                                html.Strong("Beneficiarios:", style={'color': COLORS['text_primary']}), html.Br(),
                                html.Span(f"{granja_info['Beneficiarios']} personas", 
                                         style={'color': COLORS['text_secondary'], 'fontSize': '0.9em', 'fontWeight': 'bold'})
                            ], className="mb-0")
                        ], width=6)
                    ])
                ])
            ], style={'border': f'1px solid #D1FAE5', 'boxShadow': f'0 2px 4px {COLORS["shadow"]}'})
        ], width=6),
        
        dbc.Col([
            dbc.Card([
                dbc.CardHeader([
                    html.H6([
                        html.I(className="fas fa-chart-line", style={'color': COLORS['primary'], 'marginRight': '8px'}),
                        "Estad√≠sticas de Proximidad"
                    ], className="mb-0", style={'color': COLORS['text_primary'], 'fontWeight': '600'})
                ], style={'backgroundColor': '#F0F9FF', 'border': 'none'}),
                dbc.CardBody([
                    dbc.Row([
                        dbc.Col([
                            html.P([
                                html.I(className="fas fa-map-pin", style={'color': COLORS['success'], 'marginRight': '6px'}),
                                html.Strong("Distancia M√≠nima:", style={'color': COLORS['text_primary']}), html.Br(),
                                html.Span(f"{stats_granja['Distancia_Min']:.2f} km", 
                                         style={'color': COLORS['success'], 'fontSize': '0.9em', 'fontWeight': 'bold'})
                            ], className="mb-2")
                        ], width=12),
                        dbc.Col([
                            html.P([
                                html.I(className="fas fa-balance-scale", style={'color': COLORS['info'], 'marginRight': '6px'}),
                                html.Strong("Distancia Promedio:", style={'color': COLORS['text_primary']}), html.Br(),
                                html.Span(f"{stats_granja['Distancia_Media']:.2f} km", 
                                         style={'color': COLORS['info'], 'fontSize': '0.9em', 'fontWeight': 'bold'})
                            ], className="mb-2")
                        ], width=6),
                        dbc.Col([
                            html.P([
                                html.I(className="fas fa-arrows-alt-h", style={'color': COLORS['warning'], 'marginRight': '6px'}),
                                html.Strong("Distancia M√°xima:", style={'color': COLORS['text_primary']}), html.Br(),
                                html.Span(f"{stats_granja['Distancia_Max']:.2f} km", 
                                         style={'color': COLORS['warning'], 'fontSize': '0.9em', 'fontWeight': 'bold'})
                            ], className="mb-0")
                        ], width=6)
                    ])
                ])
            ], style={'border': f'1px solid #DBEAFE', 'boxShadow': f'0 2px 4px {COLORS["shadow"]}'})
        ], width=6)
    ], className="mb-4")
    
    # Tabla de comunidades cercanas
    comunidades_detalle = resumen_detallado[
        resumen_detallado['Granja_Item'] == granja_seleccionada
    ].sort_values('Ranking')[['Ranking', 'Comunidad_ID', 'Comunidad_Nombre', 
                             'Comunidad_Municipio', 'Distancia_km']]
    
    tabla_comunidades = html.Div([
        html.H4([
            html.I(className="fas fa-project-diagram", style={'color': COLORS['primary'], 'marginRight': '10px'}),
            f"An√°lisis de Proximidad - Granja {granja_seleccionada}"
        ], className="mb-3", style={'color': COLORS['text_primary'], 'fontWeight': '600'}),
        
        # Explicaci√≥n mejorada de la tabla de comunidades cercanas
        dbc.Card([
            dbc.CardHeader([
                html.H6([
                    html.I(className="fas fa-table", style={'color': COLORS['info'], 'marginRight': '8px'}),
                    "Comunidades Energ√©ticas M√°s Pr√≥ximas"
                ], className="mb-0", style={'color': COLORS['text_primary'], 'fontWeight': '600'})
            ], style={'backgroundColor': '#F0F9FF', 'border': 'none'}),
            dbc.CardBody([
                html.P("Ranking de las 10 comunidades energ√©ticas con menor distancia euclidiana a esta granja solar, priorizadas para an√°lisis de viabilidad de interconexi√≥n", 
                      className="mb-3", 
                      style={'color': COLORS['text_secondary'], 'fontStyle': 'italic', 'fontSize': '1.05em'}),
                
                dbc.Row([
                    dbc.Col([
                        html.Strong("üìä Criterios de Ranking:", style={'color': COLORS['info'], 'fontSize': '0.95em'}),
                        html.Ul([
                            html.Li("Posici√≥n 1: Comunidad m√°s cercana (prioridad m√°xima)", style={'color': COLORS['text_primary']}),
                            html.Li("Distancia en kil√≥metros (l√≠nea recta)", style={'color': COLORS['text_primary']}),
                            html.Li("Identificaci√≥n √∫nica y ubicaci√≥n municipal", style={'color': COLORS['text_primary']})
                        ], className="mb-0", style={'fontSize': '0.85em', 'lineHeight': '1.5'})
                    ], width=6),
                    dbc.Col([
                        html.Strong("üíº Interpretaci√≥n Estrat√©gica:", style={'color': COLORS['success'], 'fontSize': '0.95em'}),
                        html.P("Menores distancias indican mayor viabilidad t√©cnica y econ√≥mica para proyectos de interconexi√≥n, reduciendo costos de transmisi√≥n y tiempos de implementaci√≥n", 
                              className="mb-0 mt-1", 
                              style={'color': COLORS['text_primary'], 'fontSize': '0.85em', 'lineHeight': '1.5'})
                    ], width=6)
                ])
            ])
        ], className="mb-3", style={'border': f'1px solid #DBEAFE'}),
        
        crear_tabla_dash(comunidades_detalle, f"tabla-comunidades-{granja_seleccionada}"),
        
        dbc.Row([
            dbc.Col([
                dbc.Button("üì• Descargar CSV", id="btn-csv-comunidades-cercanas", color="primary", className="me-2"),
                dbc.Button("üì• Descargar Excel", id="btn-excel-comunidades-cercanas", color="success")
            ], width=12)
        ], className="mt-3"),
        
        dcc.Download(id="download-csv-comunidades-cercanas"),
        dcc.Download(id="download-excel-comunidades-cercanas")
    ])
    
    return info_card, tabla_comunidades

# Funciones auxiliares para descargas
def to_csv(df):
    return df.to_csv(index=False)

def to_excel_download(df):
    import base64
    output = BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df.to_excel(writer, index=False, sheet_name='Datos')
    excel_data = output.getvalue()
    return base64.b64encode(excel_data).decode()

# Callbacks para descargas
def crear_callbacks_descarga():
    """Crear callbacks para todas las descargas"""
    
    # Callback para tabla principal
    @callback(
        Output("download-csv-principal", "data"),
        Input("btn-csv-principal", "n_clicks"),
        prevent_initial_call=True
    )
    def descargar_csv_principal(n_clicks):
        if n_clicks:
            tabla_principal = crear_tabla_principal(granjas_actualizadas, estadisticas)
            return dict(content=to_csv(tabla_principal), filename="tabla_principal.csv")
    
    @callback(
        Output("download-excel-principal", "data"),
        Input("btn-excel-principal", "n_clicks"),
        prevent_initial_call=True
    )
    def descargar_excel_principal(n_clicks):
        if n_clicks:
            tabla_principal = crear_tabla_principal(granjas_actualizadas, estadisticas)
            return dict(content=to_excel_download(tabla_principal), filename="tabla_principal.xlsx", base64=True)
    
    # Callbacks para granjas
    @callback(
        Output("download-csv-granjas", "data"),
        Input("btn-csv-granjas", "n_clicks"),
        prevent_initial_call=True
    )
    def descargar_csv_granjas(n_clicks):
        if n_clicks:
            return dict(content=to_csv(granjas_actualizadas), filename="base_granjas.csv")
    
    @callback(
        Output("download-excel-granjas", "data"),
        Input("btn-excel-granjas", "n_clicks"),
        prevent_initial_call=True
    )
    def descargar_excel_granjas(n_clicks):
        if n_clicks:
            return dict(content=to_excel_download(granjas_actualizadas), filename="base_granjas.xlsx", base64=True)
    
    # Callbacks para comunidades
    @callback(
        Output("download-csv-comunidades", "data"),
        Input("btn-csv-comunidades", "n_clicks"),
        prevent_initial_call=True
    )
    def descargar_csv_comunidades(n_clicks):
        if n_clicks:
            return dict(content=to_csv(comunidades.head(50)), filename="comunidades_muestra.csv")
    
    @callback(
        Output("download-excel-comunidades", "data"),
        Input("btn-excel-comunidades", "n_clicks"),
        prevent_initial_call=True
    )
    def descargar_excel_comunidades(n_clicks):
        if n_clicks:
            return dict(content=to_excel_download(comunidades.head(50)), filename="comunidades_muestra.xlsx", base64=True)

# Callbacks para comunidades cercanas (din√°micas)
@callback(
    Output("download-csv-comunidades-cercanas", "data"),
    [Input("btn-csv-comunidades-cercanas", "n_clicks")],
    [State("dropdown-granja", "value")],
    prevent_initial_call=True
)
def descargar_csv_comunidades_cercanas(n_clicks, granja_seleccionada):
    if n_clicks and granja_seleccionada:
        comunidades_detalle = resumen_detallado[
            resumen_detallado['Granja_Item'] == granja_seleccionada
        ].sort_values('Ranking')[['Ranking', 'Comunidad_ID', 'Comunidad_Nombre', 
                                 'Comunidad_Municipio', 'Distancia_km']]
        return dict(content=to_csv(comunidades_detalle), filename=f"comunidades_cercanas_granja_{granja_seleccionada}.csv")

@callback(
    Output("download-excel-comunidades-cercanas", "data"),
    [Input("btn-excel-comunidades-cercanas", "n_clicks")],
    [State("dropdown-granja", "value")],
    prevent_initial_call=True
)
def descargar_excel_comunidades_cercanas(n_clicks, granja_seleccionada):
    if n_clicks and granja_seleccionada:
        comunidades_detalle = resumen_detallado[
            resumen_detallado['Granja_Item'] == granja_seleccionada
        ].sort_values('Ranking')[['Ranking', 'Comunidad_ID', 'Comunidad_Nombre', 
                                 'Comunidad_Municipio', 'Distancia_km']]
        return dict(content=to_excel_download(comunidades_detalle), filename=f"comunidades_cercanas_granja_{granja_seleccionada}.xlsx", base64=True)

# Crear todos los callbacks de descarga
crear_callbacks_descarga()